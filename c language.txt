#1 pointer
#include<stdio.h>
int main(){
    int a[10]={3,5,9,4,8,2,1,6,7,0};
    printf("%p %p\n",&a,(int*)a);
    printf("%p %i\n",(int*)a,*(int*)a);
    printf("%p %i\n",(int*)a+0,*((int*)a+0));
    printf("%p %i\n",(int*)a+1,*((int*)a+1));
    printf("%p %i\n",(int*)a+2,*((int*)a+2));
    printf("%p %i\n",1+(int*)a,*(1+(int*)a));
    printf("%i %i\n",a[1],1[a]);
    int n=5;
    int *p=&n;
    int **q=&p;
    printf("%p %i\n",&n,n);
    printf("%p %p\n",&p,p);
    printf("%i\n",**q);
}

#2 等於vs等價
int a[]={0,1,2,3,0};
a[4] 等價於 *((int*)a+4)
a[0] 等於 a[4]
a[0] 不等價於 a[4]
等於vs等價
等於:內容
等價:表達意思

#3 陣列轉換
某個東西 的陣列可以轉成 某個東西   的指標
int     的陣列可以轉成 int      的指標
int的陣列的陣列可以轉乘 int的陣列 的指標

#4 declare vs define
int g(int a, int b)//declare
int g(int a, int b){ return a+b;}//define

declare
是否需要寫:一般情況可以不寫,因為c 在沒有寫declare的情況下，會藉由該function 的define(example define 中的int g(int a, int b)部分)自動補上declare。
放置:位置必須在main function之前。
*declare必須寫狀況，是在此function前面，還有其他function會用到該function，
因此該function的宣告必須寫在其他會使用該function之function之前，其他使用該function的function才知道該function如何使用。
*沒有寫j(m) function declareation在會使用j(m)的g(a,b)時錯誤的example
int g(int a, int b)//declare
int g(int a, int b){ return j(m);}//define
int j(int m)//declare
int j(int m){return m+1;}//define
*正確example
int g(int a, int b)//declare
int j(int m)//declare
int g(int a, int b){ return j(m);}//define
int j(int m){return m+1;}//define

define
是否需要寫:必須寫。
放置:可在main function之前 或之後。

#5 for 和 while 對照使用方式
A;
while(B){
    D;
    C;
}
for(A;B;C)
    D;
*注意在for 中的ABC順序代表的是執行順序，不是一定要填i=m-1;0<=i;i--，或是以此排序寫出i=m-1;0<=i;i--

#6 i++代表的值與side effect
*side effect 副作用:作用非return 及為side effect
*side effect example
printf( 1)得到的1是print function side effect
找到print return的結果，以b=printf( 1)為範例，
print(b) 會得到None，表示print 這個function return None，1只是side effect

int i=5;
//printf("%i\n",i=8);
printf("%i\n",i+1); // 值是 i+1，而且 沒有side effect
printf("%i\n",++i); // 值是 i+1，而且 side effect為i=i+1(也就是之後i的值改變成6)
printf("%i\n",i=i+1); // 值是 i+1，而且 side effect為i=i+1(也就是之後i的值改變成6)
printf("%i\n",i++); // 值是 i，而且 side effect為i=i+1(也就是之後i的值改變成6)
printf("%i\n",i--); // 值是 i，而且 side effect為i=i-1(也就是之後i的值改變成5)

i=i+1;
printf("%i\n",i=i+1);

int i=2;
while(i--)// 2 1 *當i等於0時為false，while停止
    printf("%i\n",i);//1 0
printf("%i\n",i); -1

i=0;
while(i<10){
    printf("%i\n",i);
    i++;
}
for(i=0;i<10;i++){
    printf("%i\n",i);
    i++;
}

#7 何時使用{}
在要修飾得超過0個或是1個的時候。
*修飾0個時也可以用；
if a=1
 ;

*有加{}和沒加{}的意思差別
有加{}
if a=3
    {b=1;c=2;}
意思如果 a 等於 3，「把 b 變成 1；把 c 變成 2」。

沒有加{}
if a=3
    b=1;
    c=2;
意思如果 a 等於 3，把 b 變成 1。「把 c 變成 2」。
此時不管a是否等於3，c都會變成2
